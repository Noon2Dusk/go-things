// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: queries.sql

package db

import (
	"context"
)

const deleteSpaceshipById = `-- name: DeleteSpaceshipById :exec
DELETE FROM spaceship
WHERE id = ?
`

func (q *Queries) DeleteSpaceshipById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSpaceshipById, id)
	return err
}

const getSpaceShipById = `-- name: GetSpaceShipById :one
SELECT id, name, class, crew, image, value, status, armaments FROM spaceship
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetSpaceShipById(ctx context.Context, id int32) (Spaceship, error) {
	row := q.db.QueryRowContext(ctx, getSpaceShipById, id)
	var i Spaceship
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Class,
		&i.Crew,
		&i.Image,
		&i.Value,
		&i.Status,
		&i.Armaments,
	)
	return i, err
}

const getSpaceShips = `-- name: GetSpaceShips :many
SELECT id, name, class, crew, image, value, status, armaments FROM spaceship
`

func (q *Queries) GetSpaceShips(ctx context.Context) ([]Spaceship, error) {
	rows, err := q.db.QueryContext(ctx, getSpaceShips)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Spaceship
	for rows.Next() {
		var i Spaceship
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Class,
			&i.Crew,
			&i.Image,
			&i.Value,
			&i.Status,
			&i.Armaments,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSpaceship = `-- name: InsertSpaceship :exec
INSERT INTO spaceship (
                       name,
                       class,
                       crew,
                       image,
                       value,
                       status,
                       armaments
) VALUES (?, ?, ?, ?, ?, ?, ?)
`

type InsertSpaceshipParams struct {
	Name      string
	Class     string
	Crew      int32
	Image     string
	Value     string
	Status    SpaceshipStatus
	Armaments string
}

func (q *Queries) InsertSpaceship(ctx context.Context, arg InsertSpaceshipParams) error {
	_, err := q.db.ExecContext(ctx, insertSpaceship,
		arg.Name,
		arg.Class,
		arg.Crew,
		arg.Image,
		arg.Value,
		arg.Status,
		arg.Armaments,
	)
	return err
}

const updateSpaceship = `-- name: UpdateSpaceship :exec
UPDATE spaceship
SET name = ?, class = ?, crew = ?, image = ?, value = ?, status = ?, armaments = ?
WHERE id = ?
`

type UpdateSpaceshipParams struct {
	Name      string
	Class     string
	Crew      int32
	Image     string
	Value     string
	Status    SpaceshipStatus
	Armaments string
	ID        int32
}

func (q *Queries) UpdateSpaceship(ctx context.Context, arg UpdateSpaceshipParams) error {
	_, err := q.db.ExecContext(ctx, updateSpaceship,
		arg.Name,
		arg.Class,
		arg.Crew,
		arg.Image,
		arg.Value,
		arg.Status,
		arg.Armaments,
		arg.ID,
	)
	return err
}
